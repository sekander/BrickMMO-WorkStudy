Let's go through the math behind cv2.getOptimalNewCameraMatrix() and cv2.undistortPoints() in more detail.
Mathematics Behind cv2.getOptimalNewCameraMatrix()

The function cv2.getOptimalNewCameraMatrix() is designed to compute the new camera matrix that minimizes the distortion effect when undistorting an image.

The general process involves several mathematical concepts, including camera intrinsic parameters, distortion correction, and image rectification.

    Camera Model:

    The intrinsic camera matrix KK is defined as:
    K=[fx0cx0fycy001]
    K=

​fx​00​0fy​0​cx​cy​1​

    ​

    Where:
        fx,fyfx​,fy​ are the focal lengths in the x and y directions.
        cx,cycx​,cy​ are the coordinates of the principal point (usually the center of the image).

    Distortion Model:

    Lens distortion typically has two components:
        Radial distortion: Caused by the shape of the lens.
        Tangential distortion: Caused by the misalignment of the lens.

    The distortion is modeled by the following equations for both radial and tangential distortion:
    xd=x(1+k1r2+k2r4+k3r6)+(2p1xy+p2(r2+2x2))
    xd​=x(1+k1​r2+k2​r4+k3​r6)+(2p1​xy+p2​(r2+2x2))
    yd=y(1+k1r2+k2r4+k3r6)+(p1(r2+2y2)+2p2xy)
    yd​=y(1+k1​r2+k2​r4+k3​r6)+(p1​(r2+2y2)+2p2​xy)

    Where:
        x,yx,y are the normalized image coordinates (before distortion).
        xd,ydxd​,yd​ are the distorted image coordinates.
        r2=x2+y2r2=x2+y2 is the radial distance.
        k1,k2,k3k1​,k2​,k3​ are radial distortion coefficients.
        p1,p2p1​,p2​ are tangential distortion coefficients.

    The distortion coefficients can be represented as a vector:
    dist_coeffs=[k1,k2,p1,p2,k3]
    dist_coeffs=[k1​,k2​,p1​,p2​,k3​]

    Undistortion Process:

    The goal of cv2.getOptimalNewCameraMatrix() is to compute a new camera matrix that corrects the distortion. This is done by computing the optimal camera matrix that minimizes the distortion effect and returns a Region of Interest (ROI) that shows the portion of the image that remains valid after undistortion.

    The formula used to correct the distortion is essentially the inverse of the distortion equations, which project the distorted image coordinates (xd,yd)(xd​,yd​) back to their undistorted coordinates (x,y)(x,y).

    The function essentially adjusts the intrinsic matrix KK to ensure the best possible image undistortion by minimizing black borders and making sure the image is cropped to retain valid regions.

    Optimal New Camera Matrix:

    The optimal camera matrix K′K′ that minimizes distortion is computed by adjusting the focal lengths and principal point values while retaining the center of the image. This new matrix is used to transform the distorted points back to their undistorted locations.

    The ROI is calculated to specify the valid portion of the image that will remain after undistortion. The ROI essentially avoids cutting out portions of the image that would otherwise fall outside of the undistorted region.

Mathematics Behind cv2.undistortPoints()

Now, let's look at the mathematics behind the function cv2.undistortPoints(), which takes distorted points and undistorts them using the camera matrix and distortion coefficients.

The function cv2.undistortPoints() applies the inverse distortion model to correct the distorted points. Here's how it works mathematically:

    Distorted to Undistorted Transformation:

    Let's assume we have a distorted point (xd,yd)(xd​,yd​), and we want to find the undistorted point (xu,yu)(xu​,yu​).

    To undistort a point, the procedure can be broken down into:

        Step 1: Normalize the distorted points by subtracting the principal point (cx,cy)(cx​,cy​) and dividing by the focal length fx,fyfx​,fy​.
        normalized_coords=[xd−cxfxyd−cyfy]
        normalized_coords=[fx​xd​−cx​​fy​yd​−cy​​​]

        Step 2: Apply the distortion correction using the inverse distortion formula.
        [xuyu]=undistort(normalized_coords,dist_coeffs)
        [xu​yu​​]=undistort(normalized_coords,dist_coeffs)

        The inverse distortion formula is a non-linear operation where we remove the distortion components (radial and tangential) using the inverse of the distortion equations.

        The undistorted points (xu,yu)(xu​,yu​) are then scaled back by the intrinsic matrix values to obtain the undistorted image coordinates.

    Mathematical Formulation:

    The undistortion process can be expressed as:
    [xuyu]=[fx0cx0fycy001]⋅[xnormynorm1]
    [xu​yu​​]=

​fx​00​0fy​0​cx​cy​1​
​⋅
​xnorm​ynorm​1​

    ​

    Where:
        xnorm,ynormxnorm​,ynorm​ are the normalized coordinates of the distorted point.
        xu,yuxu​,yu​ are the final undistorted coordinates.

    This process essentially “removes” the distortion and maps the distorted points to their true physical locations.

Detailed Example with Math

Let's now walk through a simple example with actual math:
Example: Undistort a Single Point

Let's say we have the following:

    Camera matrix K=[80003200800240001]K=

​80000​08000​3202401​

    ​
    Distortion coefficients dist_coeffs=[−0.2,0.1,0,0]dist_coeffs=[−0.2,0.1,0,0] (radial and tangential distortion)
    A distorted point (xd,yd)=(350,280)(xd​,yd​)=(350,280)

We want to undistort the point (350,280)(350,280).

    Normalize the Distorted Point:
    xnorm=xd−cxfx=350−320800=0.0375
    xnorm​=fx​xd​−cx​​=800350−320​=0.0375
    ynorm=yd−cyfy=280−240800=0.05
    ynorm​=fy​yd​−cy​​=800280−240​=0.05

    So, the normalized coordinates are (0.0375,0.05)(0.0375,0.05).

    Apply the Distortion Model: Using the distortion coefficients:
    r2=0.03752+0.052=0.00140625+0.0025=0.00390625
    r2=0.03752+0.052=0.00140625+0.0025=0.00390625

    Applying the radial distortion:
    xd=xnorm×(1+k1r2)=0.0375×(1−0.2×0.00390625)=0.0375×0.99921875=0.03748
    xd​=xnorm​×(1+k1​r2)=0.0375×(1−0.2×0.00390625)=0.0375×0.99921875=0.03748
    yd=ynorm×(1+k1r2)=0.05×(1−0.2×0.00390625)=0.05×0.99921875=0.04996
    yd​=ynorm​×(1+k1​r2)=0.05×(1−0.2×0.00390625)=0.05×0.99921875=0.04996

    The undistorted point is approximately (0.03748,0.04996)(0.03748,0.04996).

    Transform Back to Image Coordinates: Now, we transform back to image coordinates by multiplying with the camera matrix KK:
    [xuyu1]=[80003200800240001]⋅[0.037480.049961]

​xu​yu​1​
​=
​80000​08000​3202401​
​⋅
​0.037480.049961​

    ​
    xu=800×0.03748+320=30.984+320=350.984
    xu​=800×0.03748+320=30.984+320=350.984
    yu=800×0.04996+240=39.968+240=279.968
    yu​=800×0.04996+240=39.968+240=279.968

    The final undistorted point is approximately (350.98,279.97)(350.98,279.97).

Thus, we have undistorted the point (350,280)(350,280) to (350.98,279.97)(350.98,279.97). This point should now appear without distortion in the undistorted image.
Conclusion:

The functions cv2.getOptimalNewCameraMatrix() and cv2.undistortPoints() rely on inverse distortion models and camera intrinsic matrices to correct image and point distortions caused by lens imperfections. The math involves handling both radial and tangential distortions and transforming coordinates between distorted and undistorted spaces. The undistortion is achieved by applying these corrections, ensuring that points and images are transformed back to their "ideal" stat

